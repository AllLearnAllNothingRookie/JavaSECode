package study.iostream;

/**
 * @author AllLearnAllNothingRookie
 * @version 1.0
 * @date 2023/2/5 15:09
 *todo:IO流原理及分类
 *todo: IO流原理
 *      1.I/O是Input和Output的缩写，I/O技术是非常使用的技术，用于处理数据传输，如读/写
 *         文件，网络通讯等。
 *      2.Java程序中，对于数据的输入/输出操作以"流(Stream)"的方式进行
 *      3.java.io包下提供了各种"流"类和接口，用于获取不同种类的数据，并通过方法输入或输出数据
 *      4.输入input：读取外部数据(磁盘、光盘等存储设备中的数据)的程序(内存)中
 *      5.输出output：讲程序(内存)中的数据输出到磁盘，光盘等存储设备中
 *todo: 流的分类
 *      按操作数据单位的不同分为：字节流，字符流(按照字符操作)
 *      按数据流的流向的不同分为：输入流，输出流
 *      按流的角色的不同分为：节点流，处理流/包装流
 *
 *todo:  抽象基流    字节流                字符类
 *        输入流     InputStream           Reader
 *        输出流     OutputStream          Writer
 *      1.Java的IO流涉及40多个类，实际上非常规范，都是从如上4哥抽象基类派生的
 *      2.由这四个类派生出来的子类名称都是以其父类名作为子类名结尾后缀
 *
 * todo: 节点流和处理流
 *  1.节点流可以从一个特点的数据源读写数据，如FileReader、FileWirter
 *  2.处理流(也叫包装流)是“连接”已存在的流(节点流和处理流)之上，为重新提供
 *    更为强大的读写功能，如BufferedReader、BufferedWriter
 *  节点流与处理流的区别与联系
 *      1.节点流是底层流/低级流，直接更数据源相连
 *      2.处理流(包装流)包装节点流，既可以消除不同节点流的实现差异，也可以提供更方便的方法
 *        来完成输入输出
 *      3.处理流(包装流)对节点流进行了包装，使用了修饰器设计模式，不会直接与数据源相连
 *   处理流的功能只要体现在如下两个方面：
 *      1.性能的提高：主要以增加缓冲的方式来提高输入输出的效率
 *      2.操作的便捷：处理流可能提供了一系列便捷的方法来一次输入输出大批量的数据，使用更加灵活方便
 *
 */
public class IoFlowStudy {
}
