package study.innerclass.study.anonymousinnerclass.anonymousinnerclassdetail;

/**
 * @author AllLearnAllNothingRookie
 * @version 1.0
 * @date 2022/12/11 13:30
 * todo: 匿名内部类细节
 *      1.匿名内部类的语法比较奇特,因为匿名内部类既是一个类的定义,同时也是一个对象,因此从语法上来看
 *       匿名内部类既有定义类的特征,也有创建对象的特征,因此可以调用匿名内部类的方法
 *       1.
 *          new 类/接口/抽象类(形参列表){
 *              //重写的方法
 *          }.重写的方法名(参数列表);[可以访问匿名内部类的特有方法]
 *       2.
 *         类/接口/抽象类 对象名 = new 类/接口/抽象类(形参列表){
 *               //重写的方法
 *         };
 *         对象名.重写的方法名(参数列表);[不可以访问匿名内部类的特有方法]
 *     2.匿名内部类可以直接访问外部类的所有成员,包括私有的
 *     3.不能添加访问修饰符,因为匿名内部类的地位就是一个局部变量
 *     4.作用域:仅仅在定义匿名内部类的方法中或代码块中
 *     5.匿名内部类访问外部类成员:直接访问
 *     6.外部其他类不能访问匿名内部类[匿名内部类相当于外部类的一个局部变量]
 *     7.如果外部类和局部内部类的成员重名了后,默认遵循就近原则,如果想在局部内部类中
 *       访问外部类的成员则可以使用 外部类名.this.成员 去访问
 *       外部类名.this:本质就是一个外部类的对象,谁调用方法就是那个类
 */
public class AnonymousInnerClassDetail {
    public static void main(String[] args) {
        Outer outer = new Outer();
        outer.f1();
    }
}
